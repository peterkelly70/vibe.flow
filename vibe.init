#!/bin/bash
set -euo pipefail

# Vibe-Flow Initializer Script
# Sets up .git-tools, installs vibe.* scripts, and configures git aliases

TOOLS_DIR=".git-tools"
mkdir -p "$TOOLS_DIR"

##############################################
# vibe.push
##############################################
cat > "$TOOLS_DIR/vibe_push.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

ITER_BRANCH="iterations"
MAIN_BRANCH="main"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$ITER_BRANCH" ]]; then
  echo "‚ùå You must be on the '$ITER_BRANCH' branch to run 'git vibe.push'."
  echo "üí° Run: git checkout $ITER_BRANCH"
  exit 1
fi

if ! git diff-index --quiet HEAD --; then
  echo "‚ùå Uncommitted changes in '$ITER_BRANCH'. Please commit or stash them first."
  exit 1
fi

ITER_HASH=$(git rev-parse --short HEAD)
USER_MSG=${1:-"Snapshot from $ITER_BRANCH"}
COMMIT_MSG="$ITER_HASH - $USER_MSG"

if ! git show-ref --verify --quiet "refs/heads/$MAIN_BRANCH"; then
  echo "‚ùå Target branch '$MAIN_BRANCH' does not exist."
  exit 1
fi

echo "üì¶ Applying snapshot from '$ITER_BRANCH' to '$MAIN_BRANCH'..."
git checkout "$MAIN_BRANCH"
git checkout "$ITER_BRANCH" -- .
git commit -am "$COMMIT_MSG"
git checkout "$ITER_BRANCH"

echo "‚úÖ Snapshot pushed to '$MAIN_BRANCH':"
echo "   $COMMIT_MSG"
EOF
chmod +x "$TOOLS_DIR/vibe_push.sh"

##############################################
# vibe.pull
##############################################
cat > "$TOOLS_DIR/vibe_pull.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

DEST_BRANCH="iterations"
SRC_BRANCH="${1:-main}"

git checkout "$DEST_BRANCH" || { echo "‚ùå Could not switch to branch '$DEST_BRANCH'"; exit 1; }

if ! git show-ref --verify --quiet "refs/heads/$SRC_BRANCH"; then
  echo "‚ùå Source branch '$SRC_BRANCH' does not exist."
  exit 1
fi

echo "üì• Pulling current state from '$SRC_BRANCH' into '$DEST_BRANCH'..."
git checkout "$SRC_BRANCH" -- .

echo "‚úÖ Snapshot from '$SRC_BRANCH' applied to '$DEST_BRANCH'."
EOF
chmod +x "$TOOLS_DIR/vibe_pull.sh"

##############################################
# vibe.clean
##############################################
cat > "$TOOLS_DIR/vibe_clean.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

BRANCH="iterations"

git checkout "$BRANCH"
if ! git diff-index --quiet HEAD --; then
  echo "‚ùå Uncommitted changes in '$BRANCH'. Please commit or stash them before cleaning."
  exit 1
fi

timestamp=$(date +%Y%m%d-%H%M)
backup_branch="$BRANCH-backup-$timestamp"
git branch "$backup_branch"
echo "üõ°Ô∏è Backup created as '$backup_branch'"

echo "üìâ Starting interactive root rebase of '$BRANCH'..."
git rebase -i --root || {
  echo "‚ùå Rebase failed. You can restore from '$backup_branch'."
  exit 1
}

echo "‚úÖ '$BRANCH' cleaned. Backup: $backup_branch"
EOF
chmod +x "$TOOLS_DIR/vibe_clean.sh"

##############################################
# vibe.snapshot (manual push)
##############################################
cat > "$TOOLS_DIR/vibe_snapshot.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

ITER_BRANCH="iterations"
MAIN_BRANCH="main"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$ITER_BRANCH" ]]; then
  echo "üö´ You must be on the '$ITER_BRANCH' branch to run 'git vibe.snapshot'."
  echo "üí° Run: git checkout $ITER_BRANCH"
  exit 1
fi

if ! git diff-index --quiet HEAD --; then
  echo "üö´ Uncommitted changes in '$ITER_BRANCH'. Please commit or stash them first."
  exit 1
fi

ITER_HASH=$(git rev-parse --short HEAD)
USER_MSG=${1:-"Snapshot from $ITER_BRANCH"}
COMMIT_MSG="${ITER_HASH} - ${USER_MSG}"

if ! git show-ref --verify --quiet "refs/heads/$MAIN_BRANCH"; then
  echo "üö´ Target branch '$MAIN_BRANCH' does not exist."
  exit 1
fi

echo "üì¶ Applying snapshot from '$ITER_BRANCH' to '$MAIN_BRANCH'..."
git checkout "$MAIN_BRANCH" || {
  echo "‚ùå Failed to checkout '$MAIN_BRANCH'."
  exit 1
}

git checkout "$ITER_BRANCH" -- .
git commit -am "$COMMIT_MSG"
git checkout "$ITER_BRANCH"

echo "‚úÖ Snapshot committed to '$MAIN_BRANCH': $COMMIT_MSG"
EOF
chmod +x "$TOOLS_DIR/vibe_snapshot.sh"

##############################################
# vibe.list ‚Äî List snapshots from main
##############################################
cat > "$TOOLS_DIR/vibe_list.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

MAIN_BRANCH="main"

echo "üìú Snapshots committed to '$MAIN_BRANCH' from 'iterations':"
echo

git log "$MAIN_BRANCH" --pretty=format:'%h | %ad | %s' --date=short \
  | grep -E '^[a-f0-9]+ - ' \
  | sed 's/^/üîπ /'
EOF
chmod +x "$TOOLS_DIR/vibe_list.sh"

##############################################
# vibe.restore ‚Äî Restore specific snapshot
##############################################
cat > "$TOOLS_DIR/vibe_restore.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

DEST_BRANCH="iterations"
SNAPSHOT_HASH=${1:-}

if [[ -z "$SNAPSHOT_HASH" ]]; then
  echo "‚ùå Usage: git vibe.restore <commit-hash>"
  exit 1
fi

if ! git cat-file -e "${SNAPSHOT_HASH}^{commit}" 2>/dev/null; then
  echo "‚ùå Commit '$SNAPSHOT_HASH' not found."
  exit 1
fi

echo "üîÅ Restoring snapshot $SNAPSHOT_HASH into '$DEST_BRANCH'..."
git checkout "$DEST_BRANCH" || { echo "‚ùå Failed to checkout '$DEST_BRANCH'."; exit 1; }
git checkout "$SNAPSHOT_HASH" -- .

echo "‚úÖ Snapshot $SNAPSHOT_HASH restored into '$DEST_BRANCH'."
EOF
chmod +x "$TOOLS_DIR/vibe_restore.sh"

##############################################
# Git Aliases
##############################################
git config alias.vibe.push "!bash $TOOLS_DIR/vibe_push.sh"
git config alias.vibe.pull "!bash $TOOLS_DIR/vibe_pull.sh"
git config alias.vibe.clean "!bash $TOOLS_DIR/vibe_clean.sh"
git config alias.vibe.snapshot "!bash $TOOLS_DIR/vibe_snapshot.sh"
git config alias.vibe.list "!bash $TOOLS_DIR/vibe_list.sh"
git config alias.vibe.restore "!bash $TOOLS_DIR/vibe_restore.sh"

##############################################
# Prompt to add .git-tools to .gitignore
##############################################
GITIGNORE_FILE=".gitignore"

read -rp "üìÇ Do you want to add '$TOOLS_DIR' to .gitignore? [y/N]: " response
response=${response,,}  # lowercase

if [[ "$response" == "y" || "$response" == "yes" ]]; then
  if [[ -f "$GITIGNORE_FILE" ]]; then
    if ! grep -qxF "$TOOLS_DIR" "$GITIGNORE_FILE"; then
      echo "$TOOLS_DIR" >> "$GITIGNORE_FILE"
      echo "üõ°Ô∏è  '$TOOLS_DIR' added to .gitignore"
    else
      echo "‚ÑπÔ∏è  '$TOOLS_DIR' is already in .gitignore"
    fi
  else
    echo "$TOOLS_DIR" > "$GITIGNORE_FILE"
    echo "üõ°Ô∏è  Created .gitignore and added '$TOOLS_DIR'"
  fi
else
  echo "‚ùó '$TOOLS_DIR' was not added to .gitignore"
fi

##############################################
# Ensure 'iterations' branch exists
##############################################
if ! git show-ref --verify --quiet "refs/heads/iterations"; then
  echo -e "\nüå± 'iterations' branch not found. Creating from 'main'..."
  git checkout -b iterations main || {
    echo "‚ùå Failed to create 'iterations' from 'main'. Please check if 'main' exists."
    exit 1
  }
  echo "‚úÖ Created 'iterations' branch."
else
  echo "‚úÖ 'iterations' branch already exists."
fi

##############################################
# Final message
##############################################
echo -e "\n‚ú® Vibe-Flow tools installed successfully. Use:\n"
echo "   git vibe.push         - snapshot iterations to main"
echo "   git vibe.pull [branch] - pull latest from a branch into iterations"
echo "   git vibe.clean         - clean up iterations history"
echo "   git vibe.snapshot      - commit iterations state into main manually"
echo "   git vibe.list          - list snapshot commits in main"
echo "   git vibe.restore <hash> - restore specific snapshot to iterations"
echo -e "\nHappy vibe coding! üé∂"
