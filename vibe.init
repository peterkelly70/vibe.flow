#!/bin/bash
set -euo pipefail

# Vibe-Flow Initializer Script
# Sets up .git-tools, installs vibe.* scripts, and configures git aliases

TOOLS_DIR=".git-tools"
mkdir -p "$TOOLS_DIR"

##############################################
# vibe.push
##############################################
cat > "$TOOLS_DIR/vibe_push.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

ITER_BRANCH="iterations"
MAIN_BRANCH="main"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$ITER_BRANCH" ]]; then
  echo "❌ You must be on the '$ITER_BRANCH' branch to run 'git vibe.push'."
  echo "💡 Run: git checkout $ITER_BRANCH"
  exit 1
fi

USER_MSG="no message provided"
AUTO_PUSH=false

for arg in "$@"; do
  if [[ "$arg" == --origin ]]; then
    AUTO_PUSH=true
  else
    USER_MSG="$arg"
  fi
done

if ! git diff-index --quiet HEAD --; then
  echo "📝 Uncommitted changes detected. Staging and committing automatically..."
  git add .
  ITER_HASH=$(git rev-parse --short HEAD)
  COMMIT_MSG="Snapshot: $ITER_HASH - $USER_MSG"
  git commit -m "$COMMIT_MSG"
  echo "✅ Changes committed in '$ITER_BRANCH': $COMMIT_MSG"
else
  ITER_HASH=$(git rev-parse --short HEAD)
  COMMIT_MSG="Snapshot: $ITER_HASH - $USER_MSG"
fi

if ! git show-ref --verify --quiet "refs/heads/$MAIN_BRANCH"; then
  echo "❌ Target branch '$MAIN_BRANCH' does not exist."
  exit 1
fi

echo "📦 Applying snapshot from '$ITER_BRANCH' to '$MAIN_BRANCH'..."
git checkout "$MAIN_BRANCH"
git checkout "$ITER_BRANCH" -- .
git commit -am "$COMMIT_MSG"
git checkout "$ITER_BRANCH"

echo "✅ Snapshot pushed to '$MAIN_BRANCH':"
echo "   $COMMIT_MSG"

if $AUTO_PUSH; then
  echo "🚀 Pushing '$MAIN_BRANCH' to 'origin/$MAIN_BRANCH'..."
  git push origin "$MAIN_BRANCH"
  echo "✅ Remote updated: origin/$MAIN_BRANCH is now up to date."
fi
EOF
chmod +x "$TOOLS_DIR/vibe_push.sh"

##############################################
# vibe.pull
##############################################
cat > "$TOOLS_DIR/vibe_pull.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

DEST_BRANCH="iterations"
SRC_BRANCH="${1:-main}"

git checkout "$DEST_BRANCH" || { echo "❌ Could not switch to branch '$DEST_BRANCH'"; exit 1; }

if ! git show-ref --verify --quiet "refs/heads/$SRC_BRANCH"; then
  echo "❌ Source branch '$SRC_BRANCH' does not exist."
  exit 1
fi

echo "📥 Pulling current state from '$SRC_BRANCH' into '$DEST_BRANCH'..."
git checkout "$SRC_BRANCH" -- .

echo "✅ Snapshot from '$SRC_BRANCH' applied to '$DEST_BRANCH'."
EOF
chmod +x "$TOOLS_DIR/vibe_pull.sh"

##############################################
# vibe.clean
##############################################
cat > "$TOOLS_DIR/vibe_clean.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

BRANCH="iterations"

git checkout "$BRANCH"
if ! git diff-index --quiet HEAD --; then
  echo "❌ Uncommitted changes in '$BRANCH'. Please commit or stash them before cleaning."
  exit 1
fi

timestamp=$(date +%Y%m%d-%H%M)
backup_branch="$BRANCH-backup-$timestamp"
git branch "$backup_branch"
echo "🛡️  Backup created as '$backup_branch'"

echo "📉 Starting interactive root rebase of '$BRANCH'..."
git rebase -i --root || {
  echo "❌ Rebase failed. You can restore from '$backup_branch'."
  exit 1
}

echo "✅ '$BRANCH' cleaned. Backup: $backup_branch"
EOF
chmod +x "$TOOLS_DIR/vibe_clean.sh"

##############################################
# vibe.snapshot
##############################################
cat > "$TOOLS_DIR/vibe_snapshot.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

ITER_BRANCH="iterations"
MAIN_BRANCH="main"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$ITER_BRANCH" ]]; then
  echo "🚫 You must be on the '$ITER_BRANCH' branch to run 'git vibe.snapshot'."
  echo "💡 Run: git checkout $ITER_BRANCH"
  exit 1
fi

if ! git diff-index --quiet HEAD --; then
  echo "🚫 Uncommitted changes in '$ITER_BRANCH'. Please commit or stash them first."
  exit 1
fi

ITER_HASH=$(git rev-parse --short HEAD)
USER_MSG=${1:-"manual snapshot"}
COMMIT_MSG="Snapshot: $ITER_HASH - $USER_MSG"

if ! git show-ref --verify --quiet "refs/heads/$MAIN_BRANCH"; then
  echo "🚫 Target branch '$MAIN_BRANCH' does not exist."
  exit 1
fi

echo "📦 Applying snapshot from '$ITER_BRANCH' to '$MAIN_BRANCH'..."
git checkout "$MAIN_BRANCH" || {
  echo "❌ Failed to checkout '$MAIN_BRANCH'."
  exit 1
}

git checkout "$ITER_BRANCH" -- .
git commit -am "$COMMIT_MSG"
git checkout "$ITER_BRANCH"

echo "✅ Snapshot committed to '$MAIN_BRANCH': $COMMIT_MSG"
EOF
chmod +x "$TOOLS_DIR/vibe_snapshot.sh"

##############################################
# vibe.list
##############################################
cat > "$TOOLS_DIR/vibe_list.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

MAIN_BRANCH="main"
SNAPSHOT_TAG="Snapshot:"

echo "📜 Snapshots committed to '$MAIN_BRANCH' from 'iterations':"
echo

git log "$MAIN_BRANCH" --pretty=format:'%h | %ad | %s' --date=short \
  | grep -i "$SNAPSHOT_TAG" \
  | sed 's/^/🔹 /'
EOF
chmod +x "$TOOLS_DIR/vibe_list.sh"

##############################################
# Updated: vibe.restore
##############################################
cat > "$TOOLS_DIR/vibe_restore.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

DEST_BRANCH="iterations"
SNAPSHOT_HASH=${1:-}

if [[ -z "$SNAPSHOT_HASH" ]]; then
  echo "❌ Usage: git vibe.restore <commit-hash>"
  exit 1
fi

if ! git cat-file -e "${SNAPSHOT_HASH}^{commit}" 2>/dev/null; then
  echo "❌ Commit '$SNAPSHOT_HASH' not found."
  exit 1
fi

# Verify that the snapshot commit exists in the main branch.
if ! git branch --contains "$SNAPSHOT_HASH" | grep -q "main"; then
  echo "❌ Commit '$SNAPSHOT_HASH' is not found in the main branch."
  exit 1
fi

echo "🔁 Replacing '$DEST_BRANCH' branch with snapshot $SNAPSHOT_HASH from main..."

# If currently on the iterations branch, switch to main before deleting it.
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" == "$DEST_BRANCH" ]]; then
  git checkout main || { echo "❌ Failed to checkout main branch."; exit 1; }
fi

# Delete the iterations branch if it exists.
if git show-ref --verify --quiet "refs/heads/$DEST_BRANCH"; then
  git branch -D "$DEST_BRANCH" || { echo "❌ Failed to delete branch '$DEST_BRANCH'."; exit 1; }
fi

# Create a new iterations branch from the snapshot commit.
git checkout -b "$DEST_BRANCH" "$SNAPSHOT_HASH" || { echo "❌ Failed to create branch '$DEST_BRANCH' from commit '$SNAPSHOT_HASH'."; exit 1; }

echo "✅ '$DEST_BRANCH' branch successfully replaced with snapshot $SNAPSHOT_HASH from main."
EOF
chmod +x "$TOOLS_DIR/vibe_restore.sh"

##############################################
# vibe.iterate
##############################################
cat > "$TOOLS_DIR/vibe_iterate.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

ITER_BRANCH="iterations"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$ITER_BRANCH" ]]; then
  echo "❌ You must be on the '$ITER_BRANCH' branch to run 'git vibe.iterate'."
  echo "💡 Run: git checkout $ITER_BRANCH"
  exit 1
fi

USER_MSG=${1:-"[AI] Iteration update"}

echo "📝 Staging all changes..."
git add .

if ! git diff --cached --quiet; then
  echo "💾 Committing changes with message: $USER_MSG"
  git commit -m "$USER_MSG"
else
  echo "ℹ️  No changes to commit"
  exit 0
fi

echo "🚀 Pushing to origin/$ITER_BRANCH..."
git push origin "$ITER_BRANCH"
echo "✅ Changes pushed to origin/$ITER_BRANCH"
EOF
chmod +x "$TOOLS_DIR/vibe_iterate.sh"

##############################################
# vibe.switch
##############################################
cat > "$TOOLS_DIR/vibe_switch.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

MAIN_BRANCH="main"
ITER_BRANCH="iterations"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [[ "$CURRENT_BRANCH" == "$MAIN_BRANCH" ]]; then
  git checkout "$ITER_BRANCH"
  echo "🔀 Switched from '$MAIN_BRANCH' → '$ITER_BRANCH'"
elif [[ "$CURRENT_BRANCH" == "$ITER_BRANCH" ]]; then
  git checkout "$MAIN_BRANCH"
  echo "🔀 Switched from '$ITER_BRANCH' → '$MAIN_BRANCH'"
else
  echo "⚠️  Not on '$MAIN_BRANCH' or '$ITER_BRANCH'."
  echo "💡 Run: git checkout $ITER_BRANCH or git vibe.switch again from a valid branch."
  exit 1
fi
EOF
chmod +x "$TOOLS_DIR/vibe_switch.sh"

##############################################
# vibe.help
##############################################
cat > "$TOOLS_DIR/vibe_help.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

echo
echo "✨ Vibe-Flow: a clean Git workflow for AI-assisted or experimental coding"
echo
echo "Main idea:"
echo "  • Work freely in 'iterations'"
echo "  • Push clean snapshots to 'main'"
echo "  • Keep history readable and reversible"
echo
echo "Available commands:"
echo
echo "  git vibe.push [msg] [--origin]   →  Snapshot iterations to main"
echo "  git vibe.pull [branch]           →  Pull latest from branch into iterations"
echo "  git vibe.clean                   →  Clean up iterations history"
echo "  git vibe.snapshot [msg]          →  Commit manually to main"
echo "  git vibe.list                    →  List snapshots in main"
echo "  git vibe.restore <hash>          →  Restore a snapshot to iterations"
echo "  git vibe.iterate [msg]           →  Commit and push changes in iterations"
echo "  git vibe.switch                  →  Toggle between main and iterations"
echo "  git vibe.help                    →  Show this message"
echo
echo "🎶 Happy vibe coding!"
EOF
chmod +x "$TOOLS_DIR/vibe_help.sh"

##############################################
# Git Aliases
##############################################
git config alias.vibe.push     "!bash $TOOLS_DIR/vibe_push.sh"
git config alias.vibe.pull     "!bash $TOOLS_DIR/vibe_pull.sh"
git config alias.vibe.clean    "!bash $TOOLS_DIR/vibe_clean.sh"
git config alias.vibe.snapshot "!bash $TOOLS_DIR/vibe_snapshot.sh"
git config alias.vibe.list     "!bash $TOOLS_DIR/vibe_list.sh"
git config alias.vibe.restore  "!bash $TOOLS_DIR/vibe_restore.sh"
git config alias.vibe.iterate  "!bash $TOOLS_DIR/vibe_iterate.sh"
git config alias.vibe.switch   "!bash $TOOLS_DIR/vibe_switch.sh"
git config alias.vibe.help     "!bash $TOOLS_DIR/vibe_help.sh"

##############################################
# Prompt to add .git-tools to .gitignore
##############################################
GITIGNORE_FILE=".gitignore"

read -rp "📂 Do you want to add '$TOOLS_DIR' to .gitignore? [y/N]: " response
response=${response,,}

if [[ "$response" == "y" || "$response" == "yes" ]]; then
  if [[ -f "$GITIGNORE_FILE" ]]; then
    if ! grep -qxF "$TOOLS_DIR" "$GITIGNORE_FILE"; then
      echo "$TOOLS_DIR" >> "$GITIGNORE_FILE"
      echo "🛡️  '$TOOLS_DIR' added to .gitignore"
    else
      echo "ℹ️  '$TOOLS_DIR' is already in .gitignore"
    fi
  else
    echo "$TOOLS_DIR" > "$GITIGNORE_FILE"
    echo "🛡️  Created .gitignore and added '$TOOLS_DIR'"
  fi
else
  echo "❗ '$TOOLS_DIR' was not added to .gitignore"
fi

##############################################
# Ensure 'iterations' branch exists
##############################################
if ! git show-ref --verify --quiet "refs/heads/iterations"; then
  echo -e "\n🌱 'iterations' branch not found. Creating from 'main'..."
  git checkout -b iterations main || {
    echo "❌ Failed to create 'iterations' from 'main'. Please check if 'main' exists."
    exit 1
  }
  echo "✅ Created 'iterations' branch."
else
  echo "✅ 'iterations' branch already exists."
fi

##############################################
# Final help
##############################################
bash "$TOOLS_DIR/vibe_help.sh"
